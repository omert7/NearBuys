
services:
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    env_file:
      - ./api-gateway/.env
    restart: unless-stopped
    networks:
      - neighborbuy-network
    depends_on:
      - user-service
      - product-service
      - seller-service
      - rabbitmq
    volumes:
      - ./shared:/app/shared

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    ports:
      - "5003:5003"
    env_file:
      - ./user-service/.env
    restart: unless-stopped
    networks:
      - neighborbuy-network
    depends_on:
      postgres-db:
        condition: service_healthy
      rabbitmq:
          condition: service_healthy
    volumes:
      - ./shared:/app/shared

  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    ports:
      - "5002:5002"
    env_file:
      - ./product-service/.env
    restart: unless-stopped
    networks:
      - neighborbuy-network
    depends_on:
      - postgres-db
      - rabbitmq
    volumes:
      - ./shared:/app/shared

  seller-service:
    build:
      context: ./seller-service
      dockerfile: Dockerfile
    ports:
      - "5004:5004"
    env_file:
      - ./seller-service/.env
    restart: unless-stopped
    networks:
      - neighborbuy-network
    depends_on:
      - postgres-db
      - rabbitmq
    volumes:
      - ./shared:/app/shared

  postgres-db:
    image: postgres:14
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: neighborbuy
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - neighborbuy-network

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"  # AMQP port
      - "15672:15672"  # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - neighborbuy-network

networks:
  neighborbuy-network:
    driver: bridge

volumes:
  postgres-data:
  rabbitmq-data: